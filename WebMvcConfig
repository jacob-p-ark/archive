package com.xforce.wts.app.config;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.Ordered;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter;
import org.springframework.web.servlet.resource.PathResourceResolver;
import org.thymeleaf.spring6.ISpringTemplateEngine;
import org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver;
import org.thymeleaf.spring6.view.ThymeleafViewResolver;
import org.thymeleaf.templatemode.TemplateMode;

import com.nprotect.pluginfree.PluginFreeServlet;
import com.xforce.wts.app.intercepter.AddHeaderInterceptor;
import com.xforce.wts.app.intercepter.HttpIntercepter;
import com.xforce.wts.app.intercepter.LogInterceptor;
import com.xforce.wts.app.security.intercepter.AuthenticInterceptor;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Configuration
@PropertySource("classpath:/config/spring.security.properties")
@PropertySource("classpath:/config/nprotect.properties")
//@EnableWebMvc
public class WebMvcConfig extends DelegatingWebMvcConfiguration {
//public class WebMvcConfig implements WebMvcConfigurer {

	@Value("${spring.security.auth.request.matchers.permit.all}")
	String[] authRequestMatchers;

	@Override
	public void addCorsMappings(CorsRegistry registry) {

		registry.addMapping("/**").allowedOriginPatterns("*").allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
				.allowedHeaders("*") // 모든 헤더 허용
				.allowCredentials(true).maxAge(3600) // 1 hour
				.exposedHeaders("wtshost");
	}

	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(new LogInterceptor()) // 인터셉터 등록
				.order(1) // 인터셉터 호출 순서 지정. 낮을 수록 먼저 호출
				.addPathPatterns("/**") // 인터셉터를 적용할 URL 패턴 지정
				.excludePathPatterns(authRequestMatchers); // 인터셉터 적용 제외할 패턴 지정

		registry.addInterceptor(new WebRequestHandlerInterceptorAdapter(new HttpIntercepter()))
				.excludePathPatterns(authRequestMatchers);

		registry.addInterceptor(new AuthenticInterceptor()).excludePathPatterns(authRequestMatchers);
		
		registry.addInterceptor(new AddHeaderInterceptor());
	}

	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.setOrder(Ordered.HIGHEST_PRECEDENCE);
	}

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/resources/**")
              .addResourceLocations("classpath:/resources/")
              .setCachePeriod(31556926);
		//registry.setOrder(Ordered.HIGHEST_PRECEDENCE);
		
		//vue
		registry.addResourceHandler("/assets/**").addResourceLocations("classpath:/static/html/assets/");

//		registry.addResourceHandler("/**")
//    	.addResourceLocations("classpath:/static/html/")
//    	.resourceChain(true)
//    	.addResolver(new PathResourceResolver() {
//    		@Override
//    		protected Resource getResource(String resourcePath, Resource loaction) throws IOException {
//    			Resource requestedResource = loaction.createRelative(resourcePath);
//    			return requestedResource.exists() && requestedResource.isReadable() ? requestedResource 
//    					: new ClassPathResource("/static/html/index.html");
//    		}
//    	});
	}

	@Bean
	ViewResolver viewResolver(ISpringTemplateEngine templateEngine) {
		ThymeleafViewResolver resolver = new ThymeleafViewResolver();
		resolver.setTemplateEngine(templateEngine);
		resolver.setCharacterEncoding("UTF-8");
		return resolver;
	}

	@Bean
	SpringResourceTemplateResolver templateResolver() {
		SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();
	    resolver.setPrefix("classpath:/static/html/");
		resolver.setSuffix(".html");
		resolver.setTemplateMode(TemplateMode.HTML);
		return resolver;
	}
	
	//servlet mode
	@Bean
	public ServletRegistrationBean<PluginFreeServlet> getServletRegistrationBean()
	{
		ServletRegistrationBean<PluginFreeServlet> registrationBean = new ServletRegistrationBean<PluginFreeServlet>(new PluginFreeServlet());
		registrationBean.addUrlMappings("/nppfs.servlet.do");	//add url mapping
		registrationBean.addInitParameter("PropertiesPath", 
				"/app/imeco/webapps/x-force/WEB-INF/classes/nprotect.properties");
		registrationBean.addInitParameter("ResponseEncoding", "UTF-8");	//add init-param
		// CORS 요청 시 허용 Methods를 지정합니다.
		registrationBean.addInitParameter("Access-Control-Allow-Origin", "*");
		registrationBean.addInitParameter("Access-Control-Allow-Methods", "GET,PUT,POST,DELETE,UPDATE,OPTIONS");
		// CORS 요청 시 허용 Headers를 지정합니다.
		registrationBean.addInitParameter("Access-Control-Allow-Headers","Authorization, AuthorizationKey, X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept");
		// CORS 요청 시 Request의 결과가 캐시에 얼마나 남아있을지를 지정합니다.
		registrationBean.addInitParameter("Access-Control-Max-Age", "1728000");
		registrationBean.setLoadOnStartup(1);
		
		return registrationBean;
	}
}
